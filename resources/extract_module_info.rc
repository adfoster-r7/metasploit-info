# Extracts all module information so that it can be extracted for use within documentation.
# The information can be extracted with the following command:
#     ./msfconsole --quiet --no-database --resource ./extract_module_metadata.rc --execute-command 'exit'
# Each module will have its metadata extracted to a corresponding folder that matches the same structure in `modules`
# TODO: Confirm why `framework.modules.to_a.size != JSON.parse(File.read("./db/modules_metadata_base.json")).size`, `4061 != 4067`

<ruby>

require 'fileutils'
require 'base64'

# TODO: Investigate why calling "create" on most modules takes a minimum of 0.3 seconds
# Metasploit::Framework::Profiler.record_cpu do
#   framework.modules.create("windows/applocker_evasion_regasm_regsvcs")
# end

def record_time
  starting = Process.clock_gettime(Process::CLOCK_MONOTONIC)
  result = yield
  ending = Process.clock_gettime(Process::CLOCK_MONOTONIC)
  elapsed = ending - starting
  [result, elapsed]
end

output_path = File.join(Msf::Config.install_root, 'tmp', 'module_metadata.json')
File.delete(output_path) if File.exist?(output_path)

STDERR.puts 'Reloading all modules for faster extraction...'
framework.modules.reload_modules

STDERR.puts 'Starting module extraction'
index = 0

def sort_platform_string(string)
  string.split(',').each(&:strip!).sort.join(',')
end

def with_utf8_encoding(val)
  base64_keys = [
    'Shellcode',
    'NOP',
    'Prepend',
    'PrependEncoder',
    'PrepShellcode1',
    'PrepShellcode2',
    'BranchDelay',
    'CLSID',
    'Ret',
    'AdobeCollabSyncTriggerSignature',
    '_TOKEN',
    '_UPID',
    '_APLINKS',
    'jmpPayload'
  ].map { |key| key.force_encoding('UTF-8') }

  return val.dup.force_encoding("UTF-8") if val.is_a?(String)
  return val.map do |key, val|
    [
      with_utf8_encoding(key),
      (base64_keys.include?(with_utf8_encoding(key)) && val.is_a?(String)) ? Base64.strict_encode64(val) : with_utf8_encoding(val)
    ]
  end.to_h if val.is_a?(Hash)
  return val.map { |val| with_utf8_encoding(val) } if val.is_a?(Array)

  val
end

def target_to_h(target)
  opts = target.opts.dup

  with_utf8_encoding(
    {
      name: target.name,
      opts: opts
    }
  )
end

# Mixins that can be filtered as they're not interesting
common_mixins = (
    Msf::Exploit.ancestors &
    Msf::Auxiliary.ancestors &
    Msf::Post.ancestors
).map(&:to_s)

_, total_time = record_time do
  STDERR.puts 'Extracting module paths'
  module_sets, module_paths_timing = record_time { framework.modules.send(:module_set_by_type) }
  STDERR.puts "Extracted module paths in #{module_paths_timing}"

  modules_metadata = module_sets.flat_map do |(module_set_name, modules)|
    module_paths = modules.keys
    module_paths.map do |module_path|
      module_folder = Msf::Modules::Loader::Base::DIRECTORY_BY_TYPE[module_set_name]
      full_module_path = "#{module_folder}/#{module_path}"

      index += 1
      STDERR.puts "#{index} - #{full_module_path}"
      mod, module_creation_time = record_time { framework.modules.create(full_module_path) }

      if mod.nil?
        STDERR.puts "#{index} - #{full_module_path}, failed to load"
        next
      end
      # STDERR.puts "#{index} - #{full_module_path}, module creation time: #{module_creation_time}, #{mod.type}"

      data, module_data_extraction_time = record_time do
        options = mod.options.values.sort_by(&:name).map do |option|
          {
            type: option.type,
            name: option.name,
            required: option.required,
            default: option.default.to_s,
            aliases: option.aliases,
            advanced: option.advanced,
            evasion: option.evasion,
            description: option.desc
          }
        end

        data = {
          name: mod.name.dup.force_encoding("UTF-8"),
          fullname: mod.realname.dup.force_encoding("UTF-8"),
          aliases: mod.aliases,
          rank: mod.rank,
          stance: mod.send(:module_info)['Stance'],
          session_types: mod.respond_to?(:session_types) ? mod.session_types : nil,
          disclosure_date: mod.disclosure_date.nil? ? nil : mod.disclosure_date.to_s,
          type: mod.type,
          author: mod.author.map { |x| x.to_s.force_encoding("UTF-8") },
          description: mod.description.to_s.strip.force_encoding("UTF-8"),
          references: mod.references.map { |ref| { 'type' => ref.ctx_id, 'value' => ref.ctx_val, 'site' => ref.site } },
          platform: sort_platform_string(mod.platform_to_s),
          arch: mod.arch_to_s,
          mixins: mod.class.ancestors.map(&:to_s) - common_mixins - [mod.class.to_s],
          autofilter_ports: (
              mod.respond_to?(:autofilter_ports) ? mod.autofilter_ports : nil
            ),
          autofilter_services: (
              mod.respond_to?(:autofilter_services) ? mod.autofilter_services : nil
            ),
          targets: (
              (mod.respond_to?(:targets) && mod.targets) ? mod.targets.map { |target| target_to_h(target) } : nil
            ),
          path: mod.file_path.sub(/^#{Msf::Config.install_root}/, ''),
          ref_name: mod.class.refname,
          check: mod.has_check?,
          postAuth: mod.post_auth?,
          default_credential: mod.default_cred?,
          notes: mod.notes,
          needs_cleanup: (
              mod.respond_to?(:needs_cleanup?) ? mod.needs_cleanup? : nil
            ),
          options: options
        }

        if module_set_name == 'exploit'
          data[:compatible_payloads] = mod.compatible_payloads.map { |payload_name, payload_class| payload_name }
        end

        if module_set_name == 'payload'
          payload_data = {
            payload_type: mod.payload_type,
            adapter_refname: mod.adapter_refname,
            adapted_refname: mod.adapted_refname,
            # adapted: mod.adapted?,
            staged: mod.staged?,
            stage_refname: mod.stage_refname,
            stager_refname: mod.stager_refname,
          }.compact
          data.merge!(payload_data)
        end

        data
      end
      # STDERR.puts "#{index} - #{full_module_path}, module data extraction time: #{module_data_extraction_time}, #{mod.type}"

      data
    end
  end

  # Discard nil and sort by fullname for determinsitic output
  sorted_modules_metadata = modules_metadata.compact.sort_by { |metadata| metadata[:fullname] }

  File.open(output_path, mode: 'w') do |output_file|
    result = JSON.pretty_generate(sorted_modules_metadata)
    # STDERR.puts "Writing results:"
    # STDOUT.puts result
    output_file.write(result)
  end
end

STDERR.puts "The total time was: #{total_time}"
STDERR.puts "Results: #{output_path}"
</ruby>
